// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: likes.sql

package dblayer

import (
	"context"
)

const createLikeHistory = `-- name: CreateLikeHistory :exec
INSERT INTO LikesHistory (
    PageId,
    UserId,
    CommentId,
    LikeValue
) VALUES (
    $1, $2, $3, $4
)
`

type CreateLikeHistoryParams struct {
	Pageid    int32
	Userid    int32
	Commentid int32
	Likevalue int32
}

func (q *Queries) CreateLikeHistory(ctx context.Context, arg CreateLikeHistoryParams) error {
	_, err := q.db.Exec(ctx, createLikeHistory,
		arg.Pageid,
		arg.Userid,
		arg.Commentid,
		arg.Likevalue,
	)
	return err
}

const retrieveLike = `-- name: RetrieveLike :many
SELECT LikeValue
FROM LikesHistory
WHERE PageId = $1 AND UserId = $2 AND CommentId = $3
`

type RetrieveLikeParams struct {
	Pageid    int32
	Userid    int32
	Commentid int32
}

func (q *Queries) RetrieveLike(ctx context.Context, arg RetrieveLikeParams) ([]int32, error) {
	rows, err := q.db.Query(ctx, retrieveLike, arg.Pageid, arg.Userid, arg.Commentid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var likevalue int32
		if err := rows.Scan(&likevalue); err != nil {
			return nil, err
		}
		items = append(items, likevalue)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const retrieveLikeHistory = `-- name: RetrieveLikeHistory :many
SELECT CommentId, LikeValue
FROM LikesHistory
WHERE PageId = $1 AND UserId = $2
`

type RetrieveLikeHistoryParams struct {
	Pageid int32
	Userid int32
}

type RetrieveLikeHistoryRow struct {
	Commentid int32
	Likevalue int32
}

func (q *Queries) RetrieveLikeHistory(ctx context.Context, arg RetrieveLikeHistoryParams) ([]RetrieveLikeHistoryRow, error) {
	rows, err := q.db.Query(ctx, retrieveLikeHistory, arg.Pageid, arg.Userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RetrieveLikeHistoryRow
	for rows.Next() {
		var i RetrieveLikeHistoryRow
		if err := rows.Scan(&i.Commentid, &i.Likevalue); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLikeHistory = `-- name: UpdateLikeHistory :exec
UPDATE LikesHistory
SET LikeValue = $1
WHERE 
    PageId = $2 AND
    UserId = $3 AND
    CommentId = $4
`

type UpdateLikeHistoryParams struct {
	Likevalue int32
	Pageid    int32
	Userid    int32
	Commentid int32
}

func (q *Queries) UpdateLikeHistory(ctx context.Context, arg UpdateLikeHistoryParams) error {
	_, err := q.db.Exec(ctx, updateLikeHistory,
		arg.Likevalue,
		arg.Pageid,
		arg.Userid,
		arg.Commentid,
	)
	return err
}
