// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: pages.sql

package dblayer

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPage = `-- name: CreatePage :exec
INSERT INTO Pages (
    PageURL
) VALUES (
    $1
)
`

func (q *Queries) CreatePage(ctx context.Context, pageurl string) error {
	_, err := q.db.Exec(ctx, createPage, pageurl)
	return err
}

const doesPageExist = `-- name: DoesPageExist :one
SELECT EXISTS (
    SELECT PageId
    FROM Pages
    WHERE PageURL = $1
)
`

func (q *Queries) DoesPageExist(ctx context.Context, pageurl string) (bool, error) {
	row := q.db.QueryRow(ctx, doesPageExist, pageurl)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const increaseCommentCount = `-- name: IncreaseCommentCount :exec
UPDATE Pages
SET CommentsCount = CommentsCount + 1
WHERE PageId = $1
`

func (q *Queries) IncreaseCommentCount(ctx context.Context, pageid int32) error {
	_, err := q.db.Exec(ctx, increaseCommentCount, pageid)
	return err
}

const retrievePageDetails = `-- name: RetrievePageDetails :one
SELECT 
    PageId,
    CommentsCount,
    CreatedAt,
    PageSummary,
    PageScore
FROM Pages
WHERE PageURL = $1
`

type RetrievePageDetailsRow struct {
	Pageid        int32
	Commentscount int32
	Createdat     pgtype.Timestamp
	Pagesummary   string
	Pagescore     int32
}

func (q *Queries) RetrievePageDetails(ctx context.Context, pageurl string) (RetrievePageDetailsRow, error) {
	row := q.db.QueryRow(ctx, retrievePageDetails, pageurl)
	var i RetrievePageDetailsRow
	err := row.Scan(
		&i.Pageid,
		&i.Commentscount,
		&i.Createdat,
		&i.Pagesummary,
		&i.Pagescore,
	)
	return i, err
}

const updatePageSummaryDetails = `-- name: UpdatePageSummaryDetails :exec
UPDATE Pages
SET PageSummary = $1,
    PageScore = $2
WHERE PageId = $3
`

type UpdatePageSummaryDetailsParams struct {
	Pagesummary string
	Pagescore   int32
	Pageid      int32
}

func (q *Queries) UpdatePageSummaryDetails(ctx context.Context, arg UpdatePageSummaryDetailsParams) error {
	_, err := q.db.Exec(ctx, updatePageSummaryDetails, arg.Pagesummary, arg.Pagescore, arg.Pageid)
	return err
}
